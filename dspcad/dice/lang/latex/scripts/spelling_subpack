#!/usr/bin/env bash 

###############################################################################
# @ddblock_begin copyright
#
# Copyright (c) 1997-2015
# Maryland DSPCAD Research Group, The University of Maryland at College Park 
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF MARYLAND BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF MARYLAND HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF MARYLAND SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# MARYLAND HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#
# @ddblock_end copyright
###############################################################################

# This is a standard dlla interface to the aspell spell checking utility.
# The utility uses a local dictionary file (./local-dictionary.txt)
# in the current working directory if it exists (an empty local dictionary
# file is created if it does not exist), as well as the ``global'' dictionary
# file pointed to by the DLLADICT variable if that variable is set to
# a non-empty string value.
# 
# The output (a list of misspelled wordds) is sent to standard output,
# and also stored in the file ./misspelled.txt. For conciseness,
# duplicates are filtered from the output. Thus, if a word is mis-spelled
# multiple times, it appears only once in the output.
#
# If a local dictionary file does not exist in the current working
# directory, then an empty one is created.
function dllaspell {
    local lxprog=dllaspell
    local lxcommand="aspell list -t"
    local lxarg=""
    local file1=""
    local file2=""
    local file3=""

    if [ $# -ne 1 ]; then 
        echo $lxprog error: arg count
        return 1
    fi

    if ! [ -f ./local-dictionary.txt ]; then
        # Creating an empty local directionary file 
        touch -f ./local-dictionary.txt
    fi

    # This script only uses tex mode at present
    file1="$UXTMP/$lxprog-out.txt"
    file2="$UXTMP/$lxprog-out-filtered.txt"
    file3=./misspelled.txt
    lxarg="$1"

    if ! [ -f "$lxarg" ]; then
        echo "$lxprog" error: "$lxarg" --- file not found
        return 1
    fi


    if [ -n "$DLLADICT" ]; then
        $lxcommand -p "$DLLADICT" < "$lxarg" > "$file1"
    else
        $lxcommand < "$lxarg" > "$file1"
    fi

    sort -u "$file1" -o "$file2"
    dxrmw "./local-dictionary.txt" < "$file2" > "$file3"

    if [ $? -ne 0 ]; then
        echo $lxprog: error applying dxrmw
        return 1
    fi

    more "$file3"
}

################################################################################
# This utility configures and executes a spelling checker on a specified set of
# files.
# The misspelled words are sent to standard outpout and also
# saved in checkme-out.txt.
#
# Two environment variables are employed in this utility
# The environment variablese are both expected to be defined in the 
# \ddcode{dllaconfig} file. The environment variables are: 
# \begin{itemize} 
# \item \ddcode{DLLAFILES}, which provides the (space-delimited)
# set of files that need to be spell-checked;
# \item \ddcode{DLLASPELLCMD}, which provides the spell checking
# command that is to be used on each file.
# \end{itemize}
function dllacheckme {
    local lxprog
    local lxout=./dllacheckme-out.txt

    lxprog=dllacheckme

    if [ $# -ne 0 ]; then 
        echo $lxprog error: arg count
        return 1
    fi

    if [ -z "$DLLAFILES" ]; then 
        echo $lxprog error: no input files
        return 1
    fi

    if [ -z "$DLLASPELLCMD" ]; then 
        echo $lxprog error: no spell command specified 
        return 1
    fi

    rm -f "$lxout"
    touch "$lxout"

    lxprefix=$lxprog
    for file in $DLLAFILES ; do
        echo "$lxprefix" --- checking "$file": >> "$lxout"
        "$DLLASPELLCMD" "$file" >> "$lxout"
        echo ---------------------------- >> "$lxout"
    done

    more "$lxout"
}
