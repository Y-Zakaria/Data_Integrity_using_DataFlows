#!/usr/bin/env bash

################################################################################
# @ddblock_begin copyright
#
# Copyright (c) 1997-2015
# Maryland DSPCAD Research Group, The University of Maryland at College Park 
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF MARYLAND BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF MARYLAND HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF MARYLAND SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# MARYLAND HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#
# @ddblock_end copyright
################################################################################

# Update to a new version of the specified package.

# 
# Usage: 1. cd to a directory that contains the new (unpacked) version
#        of the specified package
#        2. dxupdate <package name>
#
# Usage Example: dxupdate dice
#
# Side effect: the previous installed version
# of the specified package is saved in "$UXTMP"/<package-name>-bak.tar.gz, 
# overwriting any previous version of "$UXTMP"/<package-name>-bak.tar.gz.
#
# Note: it is safest to keep this implemented as a function rather than
# a script since the installation is changed while it is used to
# update a package. 

function dx_update_package {
    local lxprog=dx_update_package
    local lxsource=""
    local lxpackname="$1"
    local lxpackpath="$2"

    if [ $# -ne 2 ]; then
        echo $lxprog error: arg count     
        return 1
    fi

    if ! [ -d "$lxpackname" ]; then
        echo $lxprog error: could not find directory ./"$lxpackname"
        return 1
    fi
    lxsource=`pwd`

    dxpushd .
    cd "$lxpackpath"
    if [ $? -ne 0 ]; then
        echo $lxprog error: could not go to installation directory ...
        echo the specified installation directory is \"$lxpackpath\"
        return 1
    fi

    cd .. 
    dxpack "$lxpackname" 
    if [ $? -ne 0 ]; then
        echo $lxprog error: could not archive previous version of "$lxpackname"
        return 1
    fi
    rm -r -f "$lxpackname"
    if [ $? -ne 0 ]; then
        echo $lxprog error: could not remove previous version of "$lxpackname"
        return 1
    fi
    mv "$lxsource"/"$lxpackname" . 
    if [ $? -ne 0 ]; then
        echo $lxprog error: could not move new version of "$lxpackname" ...
        echo into installation directory \"$lxpackpath\"
        return 1
    fi
    mv "$lxpackname".tar.gz "$lxpackname"-bak.tar.gz 
    mv "$lxpackname"-bak.tar.gz "$UXTMP"
    dxpopd
    echo $lxprog complete ...
    echo exit all open sessions of "$lxpackname" and their enclosing Bash ...
    echo sessions, and then start up the new version of "$lxpackname" in the ...
    echo usual way.
}

# Update to a new version of DICE.
# Usage: 1. cd to a directory that contains the new (unpacked) version
#        of DICE
#        2. dxupdate <no args>
function dxupdate {
    lxprog=dxupdate
    if [ $# -ne 0 ]; then
        echo $lxprog error: arg count     
        return 1
    fi
    dx_update_package dice "$UXDICE"
}
