#!/usr/bin/env bash

# @ddblock_begin copyright 
#
# Copyright (c) 1997-2015
# Maryland DSPCAD Research Group, The University of Maryland at College Park 
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF MARYLAND BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF MARYLAND HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF MARYLAND SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# MARYLAND HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#
# @ddblock_end copyright 

#
# Standard script to run a single unit test. 
#
# Usage: run-one-test <no arguments>
#
# This script should only be executed in a leaf level of a dice-format
# testing tree. The script executes the unit test located in the current
# directory.
#
# @author Shuvra S. Bhattacharyya
# University of Maryland, College Park 
#

if [ $run_tests_verbose = yes ]; then
    echo Running unit test at directory `pwd`
fi

# Build the test
if ! [ -f ./makeme ]; then 
    echo "WARNING: makeme file does not exist in `pwd`"
else
    ./makeme
fi

# Make sure the test output directory is there
if ! [ -d $test_output_directory ]; then 
    mkdir $test_output_directory
    cd $test_output_directory
    echo "Automatically-generated test-output directory" > README.txt
    cd ..
fi

# Remove any previously-execting test output/error files so that if the
# test fails to run, we don't compare with the previous files.
rm -f $test_output_directory/output.txt
rm -f $test_output_directory/error_output.txt

# Run the test
./runme 1>$test_output_directory/output.txt 2>$test_output_directory/error_output.txt

# Verify the output. We use diff in "brief" mode to get a standard
# result when files differ.
echo $test_output_delimeter >> $test_output
echo "Test result for:" >> $test_output
current_test_directory=`pwd`
echo $current_test_directory >> $test_output
cd $test_output_directory

# We strip trailing carriage returns when calling diff to avoid 
# discrepancies between UNIX and DOS file formats
dxdiff ../correct-output.txt output.txt >> $test_output

# Verify the error output
echo $test_output_delimeter >> $test_output
echo "Error comparison result for: " >> $test_output
echo $current_test_directory >> $test_output
dxdiff ../expected-errors.txt error_output.txt >> $test_output 
cd ..

if [ $run_tests_verbose = yes ]; then
    echo Unit test is complete
fi
